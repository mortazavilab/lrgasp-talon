configfile: "configs/config.yaml"


rule all:
    input:
        config['benchmark']['result_dir']
        # config['stringtie']['human']['gtf']
        # config['benchmark']['result_dir']
        # config['minimap']['human']['ont_sam'],

        # config['lrgasp']['dir'] + '/../lrgasp.done',
        # config['star']['index'],
        # config['star']['dir']
        # config['star']['index'],
        # directory(config['lrgasp']['dir']),
        # config['utilities']['polyA_list']


# Download and prepare row data
rule download_synapse:
    input:
        token = 'configs/synapse_auth_token.txt'
    params:
        project_id = "syn25007493"
    output:
        lrgasp_dir = directory(config['lrgasp']['dir'])
    script:
        "./scripts/synapse_download.py"


rule ungzip_synapse:
    input:
        lrgasp_dir = config['lrgasp']['dir']
    output:
        config['lrgasp']['dir'] + '/../lrgasp.done'
    shell:
        "gzip -rd {input.lrgasp_dir}/* && touch {output}"


rule download_utilities:
    params:
        utilities_dir = config['utilities']['dir'],
        links = [
            "https://raw.githubusercontent.com/LRGASP/lrgasp-submissions/fran/bin/sqanti3_evaluation/utilities/polyA_list.txt",
            "https://raw.githubusercontent.com/LRGASP/lrgasp-submissions/fran/bin/sqanti3_evaluation/utilities/refTSS.mouse.bed",
            "https://raw.githubusercontent.com/LRGASP/lrgasp-submissions/fran/bin/sqanti3_evaluation/utilities/refTSS.human.bed"
        ]
    output:
        polyA_list = config['utilities']['polyA_list'],
        human_tss = config['utilities']['human_tss'],
        mouse_tss = config['utilities']['mouse_tss']
    run:
        for i in params['links']:
            shell(f'wget {i} -P {params.utilities_dir}')


# Align sort read sequence
rule star_index:
    input:
        fasta = config['lrgasp']['reference']['human_fasta'],
        gtf = config['lrgasp']['reference']['human_gtf']
    output:
        directory(config['star']['index'])
    threads: 8
    log:
        "logs/star_index.log"
    wrapper:
        "0.74.0/bio/star/index"


rule star_align:
    input:
        fq1 = config['lrgasp']['simulation']['human']['illumina_fq1'],
        fq2 = config['lrgasp']['simulation']['human']['illumina_fq2']
    output:
        bam = config['star']['dir']
    log:
        "logs/star/illumina_human.log"
    params:
        index = config['star']['index'],
        extra = "--alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --outFilterType BySJout --outSAMunmapped Within --outFilterMultimapNmax 20 --outFilterMismatchNoverLmax 0.04 --outFilterMismatchNmax 999 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --sjdbScore 1 --genomeLoad NoSharedMemory --outSAMtype BAM SortedByCoordinate --twopassMode Basic"
    threads: 8
    wrapper:
        "0.74.0/bio/star/align"


# Align long read sequencing
rule minimap_ont:
    input:
        ref_fasta = config['lrgasp']['reference']['human_fasta'],
        fastq = config['lrgasp']['simulation']['human']['ont']
    output:
        sam = config['minimap']['human']['ont_sam']
    log:
        "logs/minimap/human.log"
    threads: 16
    shell:
        "minimap2 --MD -t {threads} -ax splice -uf --secondary=no -C5 \
          {input.ref_fasta} {input.fastq} > {output.sam} 2> {log}"


rule sam_to_bam:
    input:
        sam = config['minimap']['human']['ont_sam']
    output:
        bam = config['minimap']['human']['ont_bam']
    run:
        shell('samtools view -u {input.sam} | samtools sort -o {output.bam}')
        shell('samtools index {output.bam}')


# Transcript Isoform detection with STRINGTIE
rule stringtie_human:
    input:
        bam = config['minimap']['human']['ont_bam'],
        gtf = config['lrgasp']['reference']['human_gtf']
    output:
        gtf = config['stringtie']['human']['gtf_raw']
    shell:
        "stringtie -L -G {input.gtf} -o {output.gtf} {input.bam}"


rule post_process_stringtie:
    input:
        gtf = config['stringtie']['human']['gtf_raw']
    output:
        gtf = config['stringtie']['human']['gtf']
    script:
        "scripts/post_process_stringtie.py"


# Transcript Isoform detection with TALON
# TODO: run TALON
rule benchmark_human_task1:
    input:
        submitted_gtf = config['stringtie']['human']['gtf'],
        gtf = config['lrgasp']['reference']['human_gtf'],
        fasta = config['lrgasp']['reference']['human_fasta'],
        polyA_list = config['utilities']['polyA_list'],
        human_tss = config['utilities']['human_tss'],
        SJ = config['star']['SJ'],
        cupcake_path = config['cupcake_path'],
        sqanti3_lrgasp_path = config['sqanti3_lrgasp_path']
    params:
        platform = 'PacBio',
        conda_env = 'sqanti3_lrgasp'
    output:
        results = directory(config['benchmark']['result_dir'])
    run:
        # activate conda env for sqanti3_lrgasp
        # add cupcake and sqanti3_lrgasp to python path
        # run benchmark script
        shell(
            'set +eu '
            ' && PS1=dummy '
            ' && . $(conda info --base)/etc/profile.d/conda.sh '
            ' && conda activate {params.conda_env} '
            ' && echo $CONDA_PREFIX '
            ' && export PYTHONPATH=$PYTHONPATH:{input.cupcake_path}/sequence/ '
            ' && export PYTHONPATH=$PYTHONPATH:{input.cupcake_path} '
            ' && python {input.sqanti3_lrgasp_path} {input.submitted_gtf} {input.gtf} {input.fasta} \
                --gtf --name human_submission --platform {params.platform} --cage_peak {input.human_tss} \
                --polyA_motif_list {input.polyA_list} -c {input.SJ} \
                -d {output.results} -o human_submission_test'
        )
